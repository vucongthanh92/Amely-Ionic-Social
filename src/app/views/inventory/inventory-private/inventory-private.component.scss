// IF the browser does NOT support the  CSS Grid Layout specification
// We rely on the use of the CSS Flexbox standard instead
.wrapper {
   display: flex;
   flex-wrap: wrap;
}
.content{
  background-color: #eee;
}

// IF the browser DOES support the CSS Grid Layout specification
// then the following rules are applied instead
.wrapper {
   display: grid;

   // Define a 10 pixel gap between each grid track
   grid-gap: 10px;

   // Define a rule, that will be repeated for each grid column, where
   // the grid track is set to a minimum width of 300 pixels and a maximum
   // width of the available space within the grid container (via the fr or
   // fraction unit)

   // The auto-fill value allows as many grid tracks to be fitted into the
   // width of the grid container as possible
   grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));

   // Specify the height of the row - minimum value of 50 pixels and a maximum
   // value set to auto
   grid-auto-rows: minmax(150px, auto);

}


// Define the header/footer tag values
header,
footer {
   padding: 3em;
   margin-left: 5px;
   margin-right: 5px;
   // Add a flex rule for browsers not supporting the
   // CSS Grid Layout spec
   flex: 0 1 100%;
   // Define the start and end values for the grid column
   grid-column: 1 / -1;
   text-align: center;
   background-color: rgba(175, 186, 202, 1);
}


// Define the style rules for each panel within the grid
// container
.box {
   border-radius: 10px;
   padding: 0em;
   margin-left: 5px;
   margin-right: 5px;
   // Add a flex rule for browsers not supporting the
   // CSS Grid Layout spec
   flex: 1 1 300px;

   h2 {
      font-weight: bold;
  }
}


// We need to ensure that browsers that fall back to the
// Flexbox rules add a bottom margin of 10 pixels to all
// direct child elements within the grid container (to
// emulate the grid gap)
.wrapper > * {
  margin-bottom: 10px;
}


// Use a feature query to determine if the browser supports
// a specific CSS rule - in this case the display: grid property

// If the rule is supported then we remove the flexbox fallback
// rule of adding 10 pixels to the bottom margin of each child
// decendent of the grid container (to emulate the grid gap)
@supports (display: grid) {
  .wrapper > * {
    margin: 0;
  }
}



// Add the necessary classes for styling the
// background colours of each panel in the
// project UI
.inventory {
	background-color:  rgba(255, 255, 255, 1);
  height: 100%;
  text-align: center;
  padding: 25px;
  margin: 0em;
}

.toolbarFooter{
  min-height: 65px;
}

.badge2{
  border-radius: 10px;
  color: #fff;
  background-color: #fe974e;
  position: absolute;
  top: -15px;
  right: -15px;
  border-radius: 100%;
}
.badge1{
  border-radius: 10px;
  color: #fff;
  background-color: #fe974e;
  position: absolute;
  top: -15px;
  right: -15px;
  border-radius: 100%;
}
.divImg{
  position: relative;
  margin: auto;
  width: 10vw;
  height: 10vw;
}
.h3Img{
  margin-top: 0vw;
}
.itemRM{
  padding-right: 8px;
  border-bottom: 0 !important;
}
